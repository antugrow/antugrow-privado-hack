/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace AntugrowEscrow {
  export type LoanStruct = {
    investor: AddressLike;
    amount: BigNumberish;
    repaidAmount: BigNumberish;
    dueDate: BigNumberish;
    isActive: boolean;
  };

  export type LoanStructOutput = [
    investor: string,
    amount: bigint,
    repaidAmount: bigint,
    dueDate: bigint,
    isActive: boolean
  ] & {
    investor: string;
    amount: bigint;
    repaidAmount: bigint;
    dueDate: bigint;
    isActive: boolean;
  };
}

export interface AntugrowEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createLoan"
      | "getInvestorLoans"
      | "getLoanDetails"
      | "investorLoans"
      | "loanIdCounter"
      | "loans"
      | "owner"
      | "repayLoan"
      | "token"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "LoanCreated" | "LoanRepaid"): EventFragment;

  encodeFunctionData(
    functionFragment: "createLoan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorLoans",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLoanDetails",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "investorLoans",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "loanIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "loans", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "repayLoan",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoanDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "investorLoans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "loanIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repayLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace LoanCreatedEvent {
  export type InputTuple = [
    loanId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [loanId: bigint, investor: string, amount: bigint];
  export interface OutputObject {
    loanId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LoanRepaidEvent {
  export type InputTuple = [loanId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [loanId: bigint, amount: bigint];
  export interface OutputObject {
    loanId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AntugrowEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): AntugrowEscrow;
  waitForDeployment(): Promise<this>;

  interface: AntugrowEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createLoan: TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  getInvestorLoans: TypedContractMethod<
    [_investor: AddressLike],
    [bigint[]],
    "view"
  >;

  getLoanDetails: TypedContractMethod<
    [_loanId: BigNumberish],
    [AntugrowEscrow.LoanStructOutput],
    "view"
  >;

  investorLoans: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  loanIdCounter: TypedContractMethod<[], [bigint], "view">;

  loans: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        investor: string;
        amount: bigint;
        repaidAmount: bigint;
        dueDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  repayLoan: TypedContractMethod<
    [_loanId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createLoan"
  ): TypedContractMethod<
    [_amount: BigNumberish, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getInvestorLoans"
  ): TypedContractMethod<[_investor: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLoanDetails"
  ): TypedContractMethod<
    [_loanId: BigNumberish],
    [AntugrowEscrow.LoanStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "investorLoans"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "loanIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, boolean] & {
        investor: string;
        amount: bigint;
        repaidAmount: bigint;
        dueDate: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "repayLoan"
  ): TypedContractMethod<
    [_loanId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LoanCreated"
  ): TypedContractEvent<
    LoanCreatedEvent.InputTuple,
    LoanCreatedEvent.OutputTuple,
    LoanCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LoanRepaid"
  ): TypedContractEvent<
    LoanRepaidEvent.InputTuple,
    LoanRepaidEvent.OutputTuple,
    LoanRepaidEvent.OutputObject
  >;

  filters: {
    "LoanCreated(uint256,address,uint256)": TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;
    LoanCreated: TypedContractEvent<
      LoanCreatedEvent.InputTuple,
      LoanCreatedEvent.OutputTuple,
      LoanCreatedEvent.OutputObject
    >;

    "LoanRepaid(uint256,uint256)": TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
    LoanRepaid: TypedContractEvent<
      LoanRepaidEvent.InputTuple,
      LoanRepaidEvent.OutputTuple,
      LoanRepaidEvent.OutputObject
    >;
  };
}
